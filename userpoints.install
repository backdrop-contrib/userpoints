<?php

/**
 * @file
 * Install time hook userpoints module.
 */

/**
 * Implements hook_schema().
 */
function userpoints_schema() {
  $schema = array();
  $schema['userpoints'] = array(
    'description' => 'Holds the user points',
    'fields' => array(
      'pid' => array(
        'description' => 'Points ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'User ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'Current Points',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_points' => array(
        'description' => 'Out of a maximum points',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_update' => array(
        'description' => 'Timestamp',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'Category ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('pid'),
    'indexes' => array(
      'last_update' => array('last_update'),
      'points' => array('points'),
    ),
    'unique keys' => array(
      'uid_tid' => array('uid', 'tid'),
    ),
  );

  $schema['userpoints_total'] = array(
    'description' => 'Holds the total user points',
    'fields' => array(
      'uid' => array(
        'description' => 'User ID',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'points' => array(
        'description' => 'Current Points',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'max_points' => array(
        'description' => 'Out of a maximum points',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'last_update' => array(
        'description' => 'Timestamp',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid'),
    'indexes' => array(
      'last_update' => array('last_update'),
      'points' => array('points'),
    ),
  );

  $schema['userpoints_txn'] = array(
    'description' => 'Userpoints Transactions',
    'fields' => array(
      'txn_id' => array(
        'description' => 'Transaction ID',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Bundle',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'User ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'approver_uid' => array(
        'description' => 'Moderator User ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points' => array(
        'description' => 'Points',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'time_stamp' => array(
        'description' => 'Timestamp',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'Effective timestamp of last action on this transaction, for tracking purposes.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Status',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'description' => array(
        'description' => 'Description',
        'type' => 'text',
      ),
      'reference' => array(
        'description' => 'Reserved for module specific use',
        'type' => 'varchar',
        'length' => 128,
      ),
      'expirydate' => array(
        'description' => 'Expirydate',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'expired' => array(
        'description' => 'Expiration status',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'parent_txn_id' => array(
        'description' => 'Parent Transaction ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'Category ID',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_id' => array(
        'description' => 'ID of an entity in the Database',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'entity_type' => array(
        'description' => 'Type of entity',
        'type' => 'varchar',
        'length' => 128,
      ),
      'operation' => array(
        'description' => 'Operation being carried out',
        'type' => 'varchar',
        'length' => 48,
      ),
    ),
    'primary key' => array('txn_id'),
    'indexes' => array(
      'operation' => array('operation'),
      'reference' => array('reference'),
      'status_expired_expiry' => array('status', 'expired', 'expirydate'),
      //Optional as in update_6011
      'changed' => array('changed'),
      'uid' => array('uid'),
      'approver_uid' => array('approver_uid'),
      'points' => array('points'),
    ),
  );

  $schema['userpoints_txn_type'] = array(
    'description' => 'Userpoints transaction type',
    'fields' => array(
      'id' => array(
        'description' => 'Transaction type id',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Machine name',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Human-readable name',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => 'Type status used by Entity API',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0x01,
      ),
      'module' => array(
        'description' => 'Module owner of type used by Entity API',
        'type' => 'varchar',
        'length' => 100,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function userpoints_install() {
  // Create the default userpoints bundle that is defined in
  // userpoints_entity_info().
  $bundle_info = array(
    'name' => 'userpoints',
    'label' => st('Default'),
    'status' => 0x01,
    'module' => 'userpoints',
  );

  try {
    $bundle = new UserpointsTransactionType($bundle_info);
    $bundle->save();
    config_set('userpoints.settings', 'userpoints_default_bundle', 'userpoints');
  }
  catch (Exception $e) {
    watchdog_exception('userpoints', $e, 'Failed to create default bundle.', array(), WATCHDOG_CRITICAL);
  }

  // Set config variables from constants.
  $config = config('userpoints.settings');
  $config->set(USERPOINTS_CATEGORY_DEFAULT_TID, 0);
  $config->set(USERPOINTS_CATEGORY_DEFAULT_VID, '');
  $config->set(USERPOINTS_CATEGORY_PROFILE_DISPLAY_TID, array());
  $config->set(USERPOINTS_CATEGORY_PROFILE_DISPLAY_TID, array());
  $config->set(USERPOINTS_DISPLAY_MESSAGE, 1);
  $config->set(USERPOINTS_EXPIREAFTER_DATE, 0);
  $config->set(USERPOINTS_EXPIREON_DATE, array('day' => 1, 'month' => 1, 'year' => 1980));
  $config->set(USERPOINTS_EXPIRY_DESCRIPTION, '');
  $config->set(USERPOINTS_POINTS_MODERATION, 0);
  $config->set(USERPOINTS_REPORT_DISPLAYZERO, 1);
  $config->set(USERPOINTS_REPORT_LIMIT, 10);
  $config->set(USERPOINTS_REPORT_USERCOUNT, 30);
  $config->set(USERPOINTS_TRANSACTION_TIMESTAMP, 1);
  $config->set(USERPOINTS_TRANS_LCPOINT, 'point');
  $config->set(USERPOINTS_TRANS_LCPOINTS, 'points');
  $config->set(USERPOINTS_TRANS_UCPOINT, 'Point');
  $config->set(USERPOINTS_TRANS_UCPOINTS, 'Points');
  $config->set(USERPOINTS_TRANS_UNCAT, 'General');
  $config->save();
}

/**
 * Implements hook_uninstall().
 */
function userpoints_uninstall() {
  db_delete('variable')
    ->condition('name', 'userpoints_%', 'LIKE')
    ->execute();

  $vocabularies = taxonomy_get_vocabularies();
  if (count($vocabularies)) {
    foreach ($vocabularies as $name => $vocabulary) {
      if (isset($vocabulary->module) && $vocabulary->module == 'userpoints') {
        taxonomy_vocabulary_delete($name);
      }
    }
  }
}

/**
 * Implements hook_update_last_removed().
 */
function userpoints_update_last_removed() {
  return 7200;
}

/**
 * Implements hook_update_N().
 */
function userpoints_update_1000() {
  $config = config('userpoints .settings');
  $config->set('userpoints_truncate', update_variable_get('userpoints_truncate', '30'));
  $config->set('userpoints_default_bundle', update_variable_get('userpoints_default_bundle', 'userpoints'));
  $config->set('userpoints_points_moderation', update_variable_get('userpoints_points_moderation', 'UserpointsTransaction::STATUS_APPROVED'));
  $config->set('userpoints_transaction_timestamp', update_variable_get('userpoints_transaction_timestamp', '1'));
  update_variable_del('userpoints_truncate');
  update_variable_del('userpoints_default_bundle');
  update_variable_del('userpoints_points_moderation');
  update_variable_del('userpoints_transaction_timestamp');

  $terms = userpoints_get_categories();
  foreach ($terms as $key => $value) {
    $config->set('userpoints_block_up_records_' . $key, update_variable_get('userpoints_block_up_records_' . $key, 10));
    update_variable_del('userpoints_block_up_records_' . $key);
  }
  $config->save();
}
